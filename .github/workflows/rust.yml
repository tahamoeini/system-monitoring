name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write  # Grants write access to repository contents

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history for versioning
          persist-credentials: false  # We'll handle credentials manually

      - name: Set up Rust
        uses: moonrepo/setup-rust@v1
        with:
          profile: minimal
          override: true

      - name: Install dependencies
        run: cargo fetch

      - name: Determine next version and update Cargo.toml
        id: version
        uses: mgoltzsche/conventional-release@v0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            Cargo.toml|^version\s*=\s*"(.*)"
          release: false  # We'll create the release separately

      - name: Fetch updated code
        run: |
          git fetch origin
          git reset --hard origin/${{ github.ref_name }}

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Create GitHub Release
        if: steps.version.outputs.publish == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: target/release/your_actual_executable_name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
