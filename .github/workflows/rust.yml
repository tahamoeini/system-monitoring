name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for versioning

      # Set up Rust environment
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install project dependencies
      - name: Install dependencies
        run: cargo fetch

      # Install Protobuf compiler (`protoc`)
      - name: Install `protoc` (Protocol Buffer Compiler)
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version  # Verify installation

      # Lint the code (fail only on errors, not warnings)
      - name: Lint code with Clippy
        run: cargo clippy -- -A warnings  # Allow warnings but report errors

      # Run tests
      - name: Run tests
        run: cargo test --verbose

      # Build the project
      - name: Build project
        run: cargo build --release --verbose

      # Determine next version
      - name: Determine next version
        id: version
        uses: mgoltzsche/conventional-release@v0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          auto-release: true
          release-branch: main
          ignore-commits-before: "187470a1bc94c2e5671e0b6a4b1fd7c0b08be2e8"
          update-major-tag: false
          github-release-enabled: true
          github-release-draft: false
          github-release-latest: true
          ref: refs/heads/main

      # Check if the Git tag already exists
      - name: Check if tag already exists
        run: |
          if git rev-parse "refs/tags/v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.version.outputs.version }} already exists. Skipping release."
            exit 0
          fi

      # Update the Cargo.toml version
      - name: Update Cargo.toml version
        if: steps.version.outputs.publish == 'true'
        run: |
          VERSION=${{ steps.version.outputs.version }}
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Cargo.toml
          git commit -m "chore: bump version to $VERSION"
          git push origin main

      # Tag the release
      - name: Create Git Tag
        if: steps.version.outputs.publish == 'true'
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          git tag $TAG
          git push origin $TAG

      # Create GitHub Release
      - name: Create GitHub Release
        if: steps.version.outputs.publish == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: target/release/system-monitoring
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
