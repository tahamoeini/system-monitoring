name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for versioning

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: cargo fetch

      - name: Install `protoc` (Protocol Buffer Compiler)
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version  # Verify installation

      # Lint the code (fail only on errors, not warnings)
      - name: Lint code with Clippy
        run: cargo clippy -- -A warnings  # Allow warnings but report errors

      # Run tests
      - name: Run tests
        run: cargo test --verbose

      # Build the project
      - name: Build project
        run: cargo build --release --verbose

      - name: Check if tag exists on remote
        id: tag_check
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ steps.version.outputs.version }}"; then
            echo "Tag v${{ steps.version.outputs.version }} already exists. Skipping release."
            exit 0
          fi

      - name: Create Git Tag
        if: steps.version.outputs.publish == 'true'
        run: |
          TAG="v${{ steps.version.outputs.version }}"
          git tag $TAG
          git push origin $TAG

      - name: Create GitHub Release
        if: steps.version.outputs.publish == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: target/release/system-monitoring
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
