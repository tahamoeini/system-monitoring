name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Set up Rust environment
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install dependencies
      - name: Install dependencies
        run: cargo fetch

      # Install Protobuf compiler
      - name: Install `protoc` (Protocol Buffer Compiler)
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          protoc --version

      # Fully synchronize Git state
      - name: Fully synchronize Git state
        run: |
          git fetch --tags --force --prune
          git fetch origin main --force
          git reset --hard origin/main

      # Debug Cargo.toml version
      - name: Debug Cargo.toml version
        run: |
          grep 'version =' Cargo.toml
          echo "Cargo.toml version must match the determined version."

      # Determine next version
      - name: Determine next version
        id: version
        uses: mgoltzsche/conventional-release@v0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          auto-release: true
          release-branch: main
          ignore-commits-before: "187470a1bc94c2e5671e0b6a4b1fd7c0b08be2e8"
          update-major-tag: false
          github-release-enabled: true
          github-release-draft: false
          github-release-latest: true
          ref: refs/heads/main

      # Override version from Cargo.toml
      - name: Override version from Cargo.toml
        run: |
          VERSION=$(grep '^version =' Cargo.toml | sed -E 's/^version = "([0-9]+\.[0-9]+\.[0-9]+)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using VERSION=$VERSION"

      # Debug version outputs
      - name: Debug version outputs
        run: |
          echo "Version determined: $VERSION"
          echo "Release publish flag: ${{ steps.version.outputs.publish }}"

      # Check if tag exists on remote
      - name: Check if tag exists on remote
        id: check_tag
        run: |
          git fetch --tags --force
          if git ls-remote --tags origin | grep -q "refs/tags/v${VERSION}$"; then
            echo "Tag v${VERSION} already exists. Skipping release."
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi

      # Delete orphaned tag if necessary
      - name: Delete orphaned tag if necessary
        if: env.SKIP_RELEASE == 'true'
        run: |
          git tag -d "v${VERSION}" || true
          git push origin --delete "v${VERSION}" || true

      # Update Cargo.toml version
      - name: Update Cargo.toml version
        if: steps.version.outputs.publish == 'true'
        run: |
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Cargo.toml

          if git diff --cached --quiet; then
            echo "No changes to commit. Skipping."
          else
            git commit -m "chore: bump version to $VERSION"
          fi

      # Create Git Tag
      - name: Create Git Tag
        if: env.SKIP_RELEASE != 'true' && steps.version.outputs.publish == 'true'
        run: |
          git tag "v${VERSION}"
          git push origin "v${VERSION}"

      # Create GitHub Release
      - name: Create GitHub Release
        if: env.SKIP_RELEASE != 'true' && steps.version.outputs.publish == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${VERSION}
          name: Release $VERSION
          files: target/release/system-monitoring
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
